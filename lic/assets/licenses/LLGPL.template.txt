 {{#if copyright}}{{copyright}}{{else}}Copyright (c) 2000 Franz Incorporated, Berkeley, CA 94704{{/if}}
 . However, LGPL uses terminology that is more appropriate for a program written in C than one written in Lisp. Nevertheless, LGPL can still be applied to a Lisp program if certain clarifications are made. This document details those clarifications. Accordingly, the license for {{#if app}}{{app}}{{else}}the open-source Lisp applications{{/if}} consists of this document plus LGPL. Wherever there is a conflict between this document and the LGPL, this document takes precedence over LGPL.

A "Library" in Lisp is a collection of Lisp functions, data and foreign modules. The form of the Library can be Lisp source code (for processing by an interpreter) or object code (usually the result of compilation of source code or built with some other mechanisms). Foreign modules are object code in a form that can be linked into a Lisp executable. When we speak of functions we do so in the most general way to include, in addition, methods and unnamed functions. Lisp "data" is also a general term that includes the data structures resulting from defining Lisp classes. A Lisp application may include the same set of Lisp objects as does a Library, but this does not mean that the application is necessarily a "work based on the Library" it contains.

The {{#if library1}}{{library1}}{{else}}Library{{/if}} consists of everything in the distribution file set before any modifications are made to the files. If any of the functions or classes in the {{#if library2}}{{library2}}{{else}}Library{{/if}} are redefined in other files, then those redefinitions ARE considered a work based on the {{#if library3}}{{library3}}{{else}}Library{{/if}} . If additional methods are added to generic functions in the {{#if library4}}{{library4}}{{else}}Library{{/if}} , those additional methods are NOT considered a work based on the {{#if library5}}{{library5}}{{else}}Library{{/if}} . If {{#if library6}}{{library6}}{{else}}Library{{/if}} classes are subclassed, these subclasses are NOT considered a work based on the {{#if library7}}{{library7}}{{else}}Library{{/if}} . If the Library is modified to explicitly call other functions that are neither part of Lisp itself nor an available add-on module to Lisp, then the functions called by the modified {{#if library8}}{{library8}}{{else}}Library{{/if}} ARE considered a work based on the {{#if library9}}{{library9}}{{else}}Library{{/if}} . The goal is to ensure that the {{#if library10}}{{library10}}{{else}}Library{{/if}} will compile and run without getting undefined function errors.

It is permitted to add proprietary source code to the {{#if library11}}{{library11}}{{else}}Library{{/if}} , but it must be done in a way such that the {{#if library12}}{{library12}}{{else}}Library{{/if}} will still run without that proprietary code present. Section 5 of the LGPL distinguishes between the case of a library being dynamically linked at runtime and one being statically linked at build time. Section 5 of the LGPL states that the former results in an executable that is a "work that uses the Library." Section 5 of the LGPL states that the latter results in one that is a "derivative of the Library", which is therefore covered by LGPL. Since Lisp only offers one choice, which is to link the Library into an executable at build time, we declare that, for the purpose applying the LGPL to the {{#if library13}}{{library13}}{{else}}Library{{/if}} , an executable that results from linking a "work that uses the {{#if library14}}{{library14}}{{else}}Library{{/if}} " with the Library is considered a "work that uses the Library" and is therefore NOT covered by the LGPL.

Because of this declaration, section 6 of LGPL is not applicable to the {{#if library15}}{{library15}}{{else}}Library{{/if}} . However, in connection with each distribution of this executable, you must also deliver, in accordance with the terms and conditions of the LGPL, the source code of {{#if library16}}{{library16}}{{else}}Library{{/if}} (or your derivative thereof) that is incorporated into this executable.

